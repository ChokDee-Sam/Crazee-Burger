----------------------------------------------------------------------------
                                    Git
----------------------------------------------------------------------------

-----------------------------
Comment bien √©crire un Commit
-----------------------------
1. Type d'action (emoji)
2. Num√©ro du Ticket
3. la page la plus concern√©e (sinon, laissez vide)
4. Verbe d'action commen√ßant par une majuscule (Description)

exemple : üî•F01: Delete App.test.js


------------------
Changer de branche
------------------

git branch "nomDeBranche"   => voir le nom des branches
git checkout nomDeBranche   => changer de branche
git checkout -              => Retourne sur la branche pr√©c√©dente

Combo : git branch "F02" + git checkout F02
    =>  git checkout -b "F02"


-------------
Voir les Logs
-------------

git log                     => l'historique des commits
git log --oneline           
git log --oneline main


-------------------
Comparer 2 branches
-------------------

git diff F01..origin/F01
git diff main..origin/main   

git diff
=> Compare l'√©tat de 2 √©l√©ments selon l'ordre indiqu√©
=> Que dois faire le 1er √©l√©ment pour √™tre comme le 2eme ?
    => Code couleur vert = √† ajouter
    => Code couleur rouge = √† supprimer


---------------------
R√©cup√©rer des donn√©es
---------------------


git fetch 
=> R√©cup√©rer les changements pr√©sents en ligne
=> Vers sa machine Locale
=> Sans merger sans code en Local

Raccourcis :
git fetch + git merge 
= git pull  (attention)



---------------
Conseils utiles
---------------
- Pr√©cise "la position" de la branches
    Fais gagner du temps √† ton √©quipe quand tu t'exprimes

- GitHub distinque bien une branche local 'F01' avec une branche 'origin/F01'
        Main/origin         F01/origin
        Main/local          F01/local

- Regarder ses Commits avec GitGraph avant de git push

